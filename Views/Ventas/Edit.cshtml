@model SWebEnergia.Models.Venta

@{
    ViewData["Title"] = "Editar Venta";
}

<div class="card p-3">
    <h5 class="mb-3"><i class="fa-solid fa-pen"></i> Editar Venta</h5>
    <form asp-action="Edit" method="post" id="formVenta">
        <input type="hidden" asp-for="IdVenta" />
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="row g-3">
            <div class="col-md-6">
                <label asp-for="IdCliente" class="form-label">Cliente</label>
                <select asp-for="IdCliente" class="form-select" asp-items="@(ViewData["Clientes"] as SelectList)"></select>
                <span asp-validation-for="IdCliente" class="text-danger"></span>
            </div>

            <div class="col-md-6">
                <label asp-for="IdMantenimiento" class="form-label">Mantenimiento</label>
                <select asp-for="IdMantenimiento" class="form-select" asp-items="@(ViewData["Mantenimientos"] as SelectList)"></select>
                <span asp-validation-for="IdMantenimiento" class="text-danger"></span>
            </div>

            <div class="col-md-6">
                <label asp-for="Fecha" class="form-label">Fecha</label>
                <input asp-for="Fecha" type="date" class="form-control" />
                <span asp-validation-for="Fecha" class="text-danger"></span>
            </div>
        </div>
        
        <hr class="my-4" />

        <div class="card mb-4">
            <div class="card-header">
                <h6 class="mb-0">Productos</h6>
            </div>
            <div class="card-body">
                <table class="table table-bordered" id="productos-table">
                    <thead>
                        <tr>
                            <th>Producto</th>
                            <th style="width:120px;">Cantidad</th>
                            <th style="width:150px;">Precio Unitario</th>
                            <th>Subtotal</th>
                            <th style="width:50px;">Acción</th>
                        </tr>
                    </thead>
                    <tbody id="productos-tbody">
                        @foreach (var detalle in Model.DetalleVenta)
                        {
                            <tr>
                                <td>
                                    <select class="form-select producto-select" name="DetalleVenta[][IdProducto]">
                                        @{
                                            var productos = ViewData["Productos"] as List<SWebEnergia.Models.Producto> ?? new List<SWebEnergia.Models.Producto>();
                                        }
                                       @foreach (var p in productos)
                                       {
                                           var isSelected = (p.IdProducto == detalle.IdProducto);
                                           <option value="@p.IdProducto" data-precio="@p.PrecioVenta" selected="@(isSelected ? "selected" : null)">
                                               @p.Nombre
                                           </option>
                                       }
                                    </select>
                                </td>
                                <td>
                                    <input type="number" class="form-control cantidad-input" name="DetalleVenta[][Cantidad]" value="@detalle.Cantidad" min="1" />
                                </td>
                                <td>
                                    <input type="number" class="form-control precio-input" name="DetalleVenta[][PrecioUnitario]" value="@detalle.PrecioUnitario" step="0.01" min="0" readonly />
                                </td>
                                <td>
                                    <input type="number" class="form-control subtotal-producto" value="@(detalle.Cantidad * detalle.PrecioUnitario)" readonly />
                                </td>
                                <td class="text-center">
                                    <button type="button" class="btn btn-danger btn-sm remove-producto"><i class="fa-solid fa-trash"></i></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <button type="button" class="btn btn-info" id="add-producto">
                    <i class="fa-solid fa-plus"></i> Agregar Producto
                </button>
            </div>
        </div>

        <div class="row g-3">
            <div class="col-md-6 offset-md-6">
                <div class="d-flex justify-content-between mb-2">
                    <label asp-for="Subtotal">Subtotal:</label>
                    <input asp-for="Subtotal" class="form-control-plaintext text-end" readonly />
                </div>
                <div class="d-flex justify-content-between mb-2">
                    <label asp-for="Impuestos">Impuestos (18%):</label>
                    <input asp-for="Impuestos" class="form-control-plaintext text-end" readonly />
                </div>
                <div class="d-flex justify-content-between mb-2">
                    <label asp-for="Total">Total:</label>
                    <input asp-for="Total" class="form-control-plaintext text-end" readonly />
                </div>
            </div>
        </div>

        <div class="mt-4 d-flex gap-2">
            <button class="btn btn-primary" type="submit"><i class="fa-solid fa-check"></i> Guardar</button>
            <a class="btn btn-secondary" asp-action="Index">Volver</a>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function() {
            const IGV_RATE = 0.18;
            let productosData = @Html.Raw(ViewData["ProductosJson"]);

            function updateTotals() {
                let subtotal = 0;
                $('#productos-tbody tr').each(function() {
                    const $row = $(this);
                    const cantidad = parseFloat($row.find('.cantidad-input').val()) || 0;
                    const precio = parseFloat($row.find('.precio-input').val()) || 0;

                    const importe = cantidad * precio;
                    $row.find('.subtotal-producto').val(importe.toFixed(2));
                    subtotal += importe;
                });

                const impuestos = subtotal * IGV_RATE;
                const total = subtotal + impuestos;

                $('#Subtotal').val(subtotal.toFixed(2));
                $('#Impuestos').val(impuestos.toFixed(2));
                $('#Total').val(total.toFixed(2));
            }

            function updateProductRow(row) {
                const selectedProductoId = row.find('.producto-select').val();
                const producto = productosData.find(p => p.IdProducto == selectedProductoId);
                const precio = producto ? producto.PrecioVenta : 0;
                row.find('.precio-input').val(precio.toFixed(2));
                updateTotals();
            }

            // Inicializar la tabla al cargar la página
            $('#productos-tbody tr').each(function() {
                updateProductRow($(this));
            });

            $('#add-producto').click(function() {
                const newRow = `
                    <tr>
                        <td>
                            <select class="form-select producto-select">
                                <option value="">-- Seleccionar Producto --</option>
                                ${productosData.map(p => `<option value="${p.IdProducto}" data-precio="${p.PrecioVenta}">${p.Nombre}</option>`).join('')}
                            </select>
                        </td>
                        <td><input type="number" class="form-control cantidad-input" value="1" min="1" /></td>
                        <td><input type="number" class="form-control precio-input" step="0.01" min="0" readonly /></td>
                        <td><input type="number" class="form-control subtotal-producto" readonly /></td>
                        <td class="text-center">
                            <button type="button" class="btn btn-danger btn-sm remove-producto"><i class="fa-solid fa-trash"></i></button>
                        </td>
                    </tr>
                `;
                const $newRow = $(newRow);
                $('#productos-tbody').append($newRow);
                updateProductRow($newRow);
            });

            $(document).on('click', '.remove-producto', function() {
                $(this).closest('tr').remove();
                updateTotals();
            });

            $(document).on('change', '.producto-select', function() {
                updateProductRow($(this).closest('tr'));
            });

            $(document).on('input', '.cantidad-input', function() {
                updateTotals();
            });

            // Lógica para cargar los mantenimientos por cliente
            $('#IdCliente').change(function() {
                var idCliente = $(this).val();
                if (idCliente) {
                    $.getJSON('@Url.Action("GetMantenimientosPorCliente")', { idCliente: idCliente }, function(data) {
                        var items = '<option value="">-- Seleccionar Mantenimiento --</option>';
                        $.each(data, function(i, mantenimientos) {
                            items += `<option value="${mantenimientos.idMantenimiento}">${mantenimientos.nombre}</option>`;
                        });
                        $('#IdMantenimiento').html(items);
                    });
                } else {
                    $('#IdMantenimiento').html('<option value="">-- Seleccionar Mantenimiento --</option>');
                }
            });

            // Trigger change on load for existing selection
            var idClienteInicial = $('#IdCliente').val();
            if (idClienteInicial) {
                $('#IdMantenimiento').html('<option value="@Model.IdMantenimiento">Cargando...</option>');
                $.getJSON('@Url.Action("GetMantenimientosPorCliente")', { idCliente: idClienteInicial }, function(data) {
                    var items = '<option value="">-- Seleccionar Mantenimiento --</option>';
                    $.each(data, function(i, mantenimiento) {
                        const isSelected = mantenimiento.idMantenimiento === @Model.IdMantenimiento;
                        items += `<option value="${mantenimiento.idMantenimiento}" ${isSelected ? 'selected' : ''}>${mantenimiento.nombre}</option>`;
                    });
                    $('#IdMantenimiento').html(items);
                });
            }

            // --- Lógica de Envío del Formulario con FETCH ---
            $('#formVenta').submit(async function(e) {
                e.preventDefault(); // Evita el envío tradicional del formulario

                const form = $(this);
                const venta = {
                    IdVenta: form.find('#IdVenta').val(),
                    IdCliente: form.find('#IdCliente').val(),
                    IdMantenimiento: form.find('#IdMantenimiento').val(),
                    Fecha: form.find('#Fecha').val(),
                    Subtotal: parseFloat(form.find('#Subtotal').val()),
                    Impuestos: parseFloat(form.find('#Impuestos').val()),
                    Total: parseFloat(form.find('#Total').val()),
                    DetalleVenta: []
                };

                // Recolectar los productos de la tabla
                $('#productos-tbody tr').each(function() {
                    const row = $(this);
                    const detalle = {
                        IdVenta: venta.IdVenta,
                        IdProducto: row.find('.producto-select').val(),
                        Cantidad: parseFloat(row.find('.cantidad-input').val()),
                        PrecioUnitario: parseFloat(row.find('.precio-input').val()),
                        Importe: parseFloat(row.find('.subtotal-producto').val())
                    };
                    venta.DetalleVenta.push(detalle);
                });

                // Envío de la solicitud
                try {
                    const response = await fetch('/Ventas/Edit/' + venta.IdVenta, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                        body: JSON.stringify(venta)
                    });

                    if (response.ok) {
                        window.location.href = '/Ventas/Index';
                    } else {
                        const errorMsg = await response.text();
                        alert('Error al actualizar la venta: ' + errorMsg);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Ocurrió un error inesperado al conectar con el servidor.');
                }
            });
        });
    </script>
}